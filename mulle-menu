#! /usr/bin/env mulle-bash
# shellcheck shell=bash

[ "${TRACE}" = 'YES' -o "${MULLE_MENU_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

### >> START OF mulle-boot.sh >>
### << END OF mulle-boot.sh <<

#
# Versioning of this script
#
MULLE_EXECUTABLE_VERSION="0.1.2"


### >> START OF mulle-bashfunctions-minimal-embed.sh >>
### << END OF mulle-bashfunctions-minimal-embed.sh <<


print_flags()
{

   ##
   cat <<EOF
   --final-title <s>      : set string for final result output ("" to suppress)
   --no-ctrl-c            : do not trap CTRL-C, this disables polling
   --option <s>           : you can also add options by an option string
   --options <s>          : as option, pass multiple options separated by '\\n'
   --prefix <c>           : set prefix for unselected options ("  ")
   --select <row>         : pre-select another row than 0
   --selection-prefix <c> : set prefix for selected options ("> ")
   --sv-rc                : trust tput sv/rc, which seems to be broken often
   --title <s>            : set string for initial prompt ("" to suppress)
   --visible-items <n>    : number of items to present at once (7)
EOF

   options_technical_flags_usage \
                "                  : "
}


usage()
{
   [ $# -ne 0 ] && log_error "$*"


   cat <<EOF >&2
Usage:
   mulle-menu [flags] <menu-option> ...

   Present a menu on the command line at the current cursor position. The
   user can then use cursor keys or 'j' 'k' and ENTER to make a selection.
   The user can press ESC or 'q' to quit the menu. SIGINT (CTRL-C) is also
   intercepted and treated as a special form of quitting.

   The menu will return immediately, if only a single option is given.

   Do not use redirection when calling mulle-menu. So do not use '<' or '>' on
   stdin/stdout or use calls like  \$(mulle-menu ...)

Example:
      mulle-menu VfL Bochum 1848
Your options are:
> VfL
  Bochum
  1848

Return code:
   0-125  : index of the chosen option
   128    : user opted out, did not choose anything
   130    : user pressed CTRL-C
   131    : options are empty
   132    : too many options (128 max)
   141    : EOF encountred

Flags:
EOF
   print_flags | LC_ALL=C sort >&2

   if [ -z "${MULLE_TRACE}" ]
   then
   cat <<EOF >&2
      (use -v flag to see more options)
EOF
   fi
   echo "" >&2

   exit 133
}



_r_user_selection_draw_menu()
{
   local cur="$1"
   local max_visi_items="$2"
   local prefix="$3"
   local selected_prefix="$4"

   if [ ${ZSH_VERSION+x} ]
   then
      setopt local_options KSH_ARRAYS
   fi

   local term_width
   local term_height

   term_width=$(tput cols)
   term_height=$(tput lines)

   local max_items

   # Calculate the maximum number of items to display based on terminal height
   max_items=$(($term_height - 1))
   if (( max_items > max_visi_items ))
   then
      max_items=${max_visi_items}
   fi
   if (( max_items > ${#__menu[@]} ))
   then
      max_items=${#__menu[@]}
   fi

   local max_width
   local max_selected_width

   max_selected_width=$(( ${term_width} - ${#selected_prefix} ))
   if (( max_selected_width < 4 ))
   then
      max_selected_width=4
   fi

   max_width=$(( ${term_width} - ${#prefix} ))
   if (( max_width < 4 ))
   then
      max_width=4
   fi

   local half_window

   half_window=$((max_items / 2))

   local start
   local end

   start=$((cur - half_window))
   end=$((cur + half_window))

   if ((start < 0))
   then
       start=0
       end=$((max_items - 1))
   else
      if ((end >= ${#__menu[@]}))
      then
         end=$(( ${#__menu[@]} - 1 ))
         start=$((end - max_items + 1))
     fi
   fi

   local i
   local n

   n=0
   for ((i=start; i<=end; i++))
   do
      if [[ $i -eq $cur ]]
      then
         printf "${selected_prefix}%.*s${C_RESET}\n" "${max_selected_width}" "${__menu[$i]}"
      else
         printf "${prefix}%.*s${C_RESET}\n" "${max_width}" "${__menu[$i]}";
      fi
      n=$(( n + 1 ))
   done

   RVAL=$n
}


_user_selection_clear_menu()
{
   local n="$1"

   # tput cuu$n # no worky in GNOME
   while [ $n -gt 0 ]
   do
      tput cuu1
      n=$(( n - 1 ))
   done
   tput ed
}


# Set trap to call reset_terminal when a Ctrl+C interrupt occurs
_user_selection_ctrl_c()
{
   _user_selection_ctrl_c_pressed='YES'

   # try to restore something
   tput sgr0
   tput rmacs
}



#
# runs in subshell, so we can trap CTRL-C to reset terminal later
# on
#
user_selection_menu_loop()
(
   log_entry "user_selection_menu_loop" "$@"

   local max_visi_items="$1"
   local selected="$2"
   local prefix="$3"
   local selected_prefix="$4"
   local mode="$5"
   local options="$6"

   # Use a while loop to read each line of the string
   local __menu=()
   local option

   .foreachline option in ${options}
   .do
      if [ ! -z "${option}" ]
      then
         __menu+=("$option")
      else
         log_warning "Empty line in menu options"
      fi
   .done

   if [ "${#__menu[@]}" -eq 0 ]
   then
      log_warning "Empty menu"
      return 131  # -5
   fi

   if [ "${#__menu[@]}" -eq 1 ]
   then
      return 0
   fi

   if [ "${#__menu[@]}" -gt 128 ]
   then
      log_warning "Menu is too large"
      return 132 # -6
   fi


   # remember this cursor place
   case ",${mode}," in
      *,sv-rc,*)
         tput sc    # remember
      ;;
   esac

   tput sgr0  # reset a little
   tput rmacs
   tput civis # turn off cursor

   local cur="${selected:-0}"
   local n

   if [ "$cur" -ge "${#__menu[@]}" ] 2> /dev/null
   then
      cur=0
   fi

   _r_user_selection_draw_menu "${cur}" "${max_visi_items}" "${prefix}" "${selected_prefix}"
   n="${RVAL}"

   _user_selection_ctrl_c_pressed='NO'

   local timeout

   case ",${mode}," in
      *,no-ctrl-c,*)
         timeout=
      ;;

      *)
         timeout="-t 0.2500"
         trap _user_selection_ctrl_c SIGINT
      ;;
   esac

   local key
   local rc=-128 # never returned
   local readflags

   if [ ${ZSH_VERSION+x} ]
   then
      readflags="-k1"
      stty -echo
   else
      readflags="-s -N1"
   fi

   while [ $rc -eq -128 ]
   do
      # poll every .25s if we need to check for CTRL-C
      while read ${readflags} ${timeout} key
      do
          if [[ "$key" == "" ]]
          then
             rc=141   # EOF i guess
             continue
          fi

          k1=
          k2=
          k3=
          read ${readflags} -t 0.0001 k1; read ${readflags} -t 0.0001 k2; read ${readflags} -t 0.0001 k3
          key="${key}${k1}${k2}${k3}"

          log_debug "key: ${key}"

          case "$key" in
              i|j|$'\e[A'|$'\e0A'|$'\e[D'|$'\e0D') ((cur > 0)) && ((cur--));;
              k|l|$'\e[B'|$'\e0B'|$'\e[C'|$'\e0C') ((cur < ${#__menu[@]}-1)) && ((cur++));;
              $'\n') rc=0; break;;
              q|''|$'\e') rc=128; break;;
          esac

          _user_selection_clear_menu "${n}"
          _r_user_selection_draw_menu "${cur}" "${max_visi_items}" "${prefix}" "${selected_prefix}"
          n="${RVAL}"
      done

      if [ "${_user_selection_ctrl_c_pressed}" = 'YES' ]
      then
         rc=130
      fi
   done

   if [ ${ZSH_VERSION+x} ]
   then
      stty echo
   fi

   _user_selection_clear_menu "${n}"

   # hope cursor was properly remembered
   case ",${mode}," in
      *,sv-rc,*)
         tput rc    # just doesnt work usually don't know why
         tput ed
      ;;
   esac

   tput cnorm  # turn on cursor
   tput rmacs

   if [ $rc -ne 0 ]
   then
      return $rc
   fi

   return $cur
)


main()
{
   local OPTION_TITLE='DEFAULT'
   local OPTION_FINAL_TITLE='DEFAULT'
   local OPTION_VISIBLE_ITEMS=7
   local OPTION_PREFIX="  "
   local OPTION_SELECTED_PREFIX="${C_GREEN}> "
   local OPTION_SELECT=0
   local OPTION_MODE=
   local OPTIONS=

   #
   # simple flag handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         -h*|--help|help)
            usage
         ;;

         --title)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            OPTION_TITLE="$1"
         ;;

         --final-title)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            OPTION_FINAL_TITLE="$1"
         ;;

         --select)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            OPTION_SELECT="$1"
         ;;

         --selected-prefix)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            OPTION_SELECTED_PREFIX="$1"
         ;;

         --option-prefix)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            OPTION_PREFIX="$1"
         ;;

         --option|--options)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            r_add_line "${OPTION}" "$1"
            OPTIONS="${RVAL}"
         ;;

         -n|--visible-items)
            [ $# -eq 1 ] && usage "missing argument to $1"
            shift

            OPTION_VISIBLE_ITEMS="$1"
         ;;

         --no-ctrl-c|--sv-rc)
            r_comma_concat "${OPTION_MODE}" "${1:2}"
            OPTION_MODE="${RVAL}"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --)
            shift
            break
         ;;

         -*)
            usage "Unknown flag \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE:-}" && set -x

   local option

   # collect all options together (usually its either or)
   for option in "$@"
   do
      r_add_line "${OPTIONS}" "${option}"
      OPTIONS="${RVAL}"
   done

   local title

   if ! [ -z "${OPTION_TITLE}" ]
   then
      title="${OPTION_TITLE}"
      if [ "${title}" = 'DEFAULT' ]
      then
         title="Your options are:"
      fi
      printf "%b\n" "${title}"
   fi

   local i

   user_selection_menu_loop  "${OPTION_VISIBLE_ITEMS:-7}" \
                             "${OPTION_SELECT}" \
                             "${OPTION_PREFIX}" \
                             "${OPTION_SELECTED_PREFIX}" \
                             "${OPTION_MODE}" \
                             "${OPTIONS}"
   i=$?

   if [ $i -le 128 ]
   then
      if [ ! -z "${OPTION_TITLE}" ]
      then
         tput cuu1
         tput ed
      fi

      if [ ! -z "${OPTION_FINAL_TITLE}" ]
      then
         title="${OPTION_FINAL_TITLE}"
         if [ "${title}" = 'DEFAULT' ]
         then
            title="Your choice: "
         fi

         r_line_at_index "${OPTIONS}" "$i"
         printf "%b%b\n" "${title}" "${RVAL}"
      fi
   fi
   return $i
}


call_with_flags "main" "$@"
